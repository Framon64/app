import logging
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, types
from aiogram.types import CallbackQuery
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Command
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import asyncio
from dotenv import load_dotenv
import os
import json

import text
from bairbie import barbie

load_dotenv()

TOKEN = os.environ.get('BOT__TOKEN')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


user_states = text.user_states
class UserState:
    def __init__(self):
        self.button_states = {
            'Bairbie': False,
            'Ken': False,
            'Blonde': False,
            'Brunette': False,
            'Red': False,
            'Black': False,
            'Tan': False,
            'Black ': False,
            'Light': False,
        }
        self.photo_path = None
        self.subscribed = False


# –∫–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=[text.START_COMMAND])
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = UserState()

    subscribed = await user_subscribed(user_id)
    if subscribed:
        with open("photo_for_the_team_start1.jpg", "rb") as photo: 
            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å! üéÄ\n\n–Ø - üéÄ –ë–æ—Ç @barbiephotobot üéÄ.\n\n–ü—Ä–µ–≤—Ä–∞—â–∞—é –æ–±—ã—á–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ë–∞—Ä–±–∏! üì∏‚ú®\\üåü –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø—Ä–µ–≤—Ä–∞—Ç—é –µ–µ –≤ –Ω–µ—á—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ! üåü")
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ö–∞–Ω–∞–ª 1", url="https://t.me/thepriceofart"),
    

            # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
            InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!", callback_data="after_subscription")
        )
        await bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=keyboard)
#
def get_user_state(user_id):
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]

async def toggle_button_state(user_id, button_id):
    user_state = get_user_state(user_id)
    user_state.button_states[button_id] = not user_state.button_states[button_id]

async def print_button_states(user_id):
    user_state = get_user_state(user_id)
    for button_id, is_checked in user_state.button_states.items():
        return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(user_state):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫
    keyboard.row(
        types.InlineKeyboardButton(text='‚úÖ Bairbie' if user_state.button_states['Bairbie'] else 'Bairbie', callback_data='Bairbie'),
        types.InlineKeyboardButton(text='‚úÖ Ken' if user_state.button_states['Ken'] else 'Ken', callback_data='Ken')
    )
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∏–∑ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏
    keyboard.row(types.InlineKeyboardButton(text='–¶–≤–µ—Ç –≤–æ–ª–æ—Å:', callback_data='static_button1'))
    
    # –¢—Ä–µ—Ç–∏–π –∏ —á–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥—ã –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    keyboard.row(
        types.InlineKeyboardButton(text='‚úÖ Blonde' if user_state.button_states['Blonde'] else 'Blonde', callback_data='Blonde'),
        types.InlineKeyboardButton(text='‚úÖ Brunette' if user_state.button_states['Brunette'] else 'Brunette', callback_data='Brunette')
    )
    keyboard.row(
        types.InlineKeyboardButton(text='‚úÖ Red' if user_state.button_states['Red'] else 'Red', callback_data='Red'),
        types.InlineKeyboardButton(text='‚úÖ Black' if user_state.button_states['Black'] else 'Black', callback_data='Black')
    )
    
    # –ü—è—Ç—ã–π —Ä—è–¥ –∏–∑ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏
    keyboard.row(types.InlineKeyboardButton(text='–¶–≤–µ—Ç –∫–æ–∂–∏:', callback_data='static_button2'))
    
    # –®–µ—Å—Ç–æ–π –∏ —Å–µ–¥—å–º–æ–π —Ä—è–¥—ã –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    keyboard.row(
        types.InlineKeyboardButton(text='‚úÖ Tan' if user_state.button_states['Tan'] else 'Tan', callback_data='Tan'),
        types.InlineKeyboardButton(text='‚úÖ Light' if user_state.button_states['Light'] else 'Light', callback_data='Light'),
        types.InlineKeyboardButton(text='‚úÖ Black' if user_state.button_states['Black '] else 'Black ', callback_data='Black ')
    )
    # –≤–æ—Å—å–º–æ–π —Ä—è–¥, –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    keyboard.row(types.InlineKeyboardButton(text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', callback_data='generate'))
    
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
@dp.callback_query_handler(lambda c: c.data == 'generate')
async def process_generate_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state = user_states.get(user_id)
    if user_state and user_state.photo_path:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        with open("photo_2023-08-02_07-22-48.jpg", "rb") as processed_photo:
            await bot.send_photo(chat_id=user_id, photo=processed_photo, caption="üîÑ–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        inline_buttons1 = types.InlineKeyboardMarkup(row_width=1)
        topup_button1 = types.InlineKeyboardButton('–£–±—Ä–∞—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫', callback_data="1")
        buy_vip_button1 = types.InlineKeyboardButton('–∫—É–ø–∏—Ç—å VIP', callback_data="2")
        inline_buttons1.add(topup_button1, buy_vip_button1)
        selected_buttons = [button_id for button_id, is_checked in user_state.button_states.items() if is_checked]
        await barbie(selected_buttons[0], selected_buttons[1], selected_buttons[2], user_state.photo_path, user_id)
        with open(f"photos/{user_id}.jpg", "rb") as processed_photo:
            await bot.send_photo(chat_id=user_id, photo=processed_photo, caption="‚ú® –ü–µ—Ä–µ–≤–æ–ø–ª–æ—Ç–∏—Å—å –≤ —Å—Ç–∏–ª—å –ë–∞—Ä–±–∏ –∏ –ö–µ–Ω–∞!\n\nüéÄ–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –æ–±—ã—á–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –¥–µ–ª–∏—Å—å –∏–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ë–æ—Ç–∞ @barbiephotobot", reply_markup=inline_buttons1)
    else:
        await bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")

# –î–æ–±–∞–≤—å—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_photo_path
async def get_photo_path(file_id):
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    downloaded_file = await bot.download_file(file_path)
    
    # –ü—É—Ç—å, –∫—É–¥–∞ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    local_path = f"photos/{file_id}.jpg"
    with open(local_path, 'wb') as f:
        f.write(downloaded_file.read())
    
    return local_path

@dp.callback_query_handler(lambda c: c.data in get_user_state(0).button_states.keys() or c.data.startswith("static_button"))
async def process_callback_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state = get_user_state(user_id)
    button_id = callback_query.data
    
    if button_id.startswith("static_button"):
        return
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
    await toggle_button_state(user_id, button_id)
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø–∞—Ä–µ
    if button_id in ['Bairbie', 'Ken']:
        partner_button = 'Ken' if button_id == 'Bairbie' else 'Bairbie'
        user_state.button_states[partner_button] = False
    elif button_id in ['Blonde', 'Brunette', 'Red', 'Black']:
        partner_buttons = ['Blonde', 'Brunette', 'Red', 'Black']
        partner_buttons.remove(button_id)
        for partner_button in partner_buttons:
            user_state.button_states[partner_button] = False
    elif button_id in ['Tan', 'Light', 'Black ']:
        partner_buttons = ['Tan', 'Light', 'Black ']
        partner_buttons.remove(button_id)
        for partner_button in partner_buttons:
            user_state.button_states[partner_button] = False
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
    new_keyboard = create_keyboard(user_state)
    await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id, reply_markup=new_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'after_subscription')
async def process_after_subscription(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    subscribed = await user_subscribed(user_id)

    if subscribed:
        with open("photo_2023-08-02_07-22-03.jpg", "rb") as photo:
            await bot.send_photo(chat_id=user_id, photo=photo, caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å! üéÄ\n\n–Ø - üéÄ –ë–æ—Ç @barbiephotobot üéÄ.\n\n–ü—Ä–µ–≤—Ä–∞—â–∞—é –æ–±—ã—á–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ë–∞—Ä–±–∏! üì∏‚ú®\\üåü –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø—Ä–µ–≤—Ä–∞—Ç—é –µ–µ –≤ –Ω–µ—á—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ! üåü", reply_markup=types.ReplyKeyboardRemove())
    else:
        await bot.answer_callback_query(callback_query.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", show_alert=True)

async def user_subscribed(user_id):
    user = await bot.get_chat_member(chat_id="@thepriceofart", user_id=user_id)
    return user.status == "member" or user.status == "administrator" or user.status == "creator"

@dp.message_handler(content_types=['photo'])
async def process_photo(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)
    if user_state:
        subscribed = await user_subscribed(user_id)
        if subscribed:
            user_state.photo_path = await get_photo_path(message.photo[-1].file_id)
            with open("1_8164-fotor-2023082112849.jpg", "rb") as photo:
                await bot.send_photo(chat_id=message.chat.id, photo=photo, caption="‚öôÔ∏è–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–∑, –≤—ã–±—Ä–∞–≤ –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏:",  reply_markup=create_keyboard(user_state))
        else:
            await bot.send_message(chat_id=user_id, text="–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞.")
    else:
        await bot.send_message(chat_id=user_id, text="–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)